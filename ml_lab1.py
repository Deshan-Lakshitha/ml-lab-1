# -*- coding: utf-8 -*-
"""ML_lab1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1couK-XTusNHd022StIvIohYVa3rkIG8U
"""

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.feature_selection import SelectKBest, f_classif
from sklearn.metrics import mean_squared_error

from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC
from sklearn.svm import SVR
from sklearn.linear_model import LinearRegression

from sklearn.metrics import accuracy_score, classification_report
from sklearn.neighbors import KNeighborsClassifier
from sklearn.metrics import accuracy_score

# Load datasets
train_df = pd.read_csv("/content/drive/MyDrive/ML/Lab_1/train.csv")
valid_df= pd.read_csv("/content/drive/MyDrive/ML/Lab_1/valid.csv")
test_df = pd.read_csv("/content/drive/MyDrive/ML/Lab_1/test.csv")

labels = ['label_1', 'label_2', 'label_3', 'label_4']
X_train = {}
X_valid = {}
y_train = {}
y_valid = {}
X_test = {}

"""For each label, seperate feature data"""

for label in labels:
    # Standardize the feature columns
    scaler = StandardScaler()
    tr_df = train_df
    val_df = valid_df
    tst_df = test_df
    if label == 'label_2': # Remove NaN rows for label_2
      tr_df = train_df[train_df[label].notna()]
      val_df = valid_df[valid_df[label].notna()]

    X_train[label] = pd.DataFrame(scaler.fit_transform(tr_df.iloc[:, :-4]))
    X_valid[label] = pd.DataFrame(scaler.transform(val_df.iloc[:, :-4]))
    X_test[label] = pd.DataFrame(scaler.transform(tst_df.iloc[:, :-4]))

    # Ensure you keep the target labels as separate DataFrames
    y_train[label] = tr_df[label]
    y_valid[label] = val_df[label]

X_train['label_1']

X_train['label_2']

"""Feature Selection using K Best


"""

new_features = 100
selector = SelectKBest(f_classif, k=new_features)

X_train_selected = {}
X_valid_selected = {}
X_test_selected = {}
for label in X_train:
  X_train_selected[label] = pd.DataFrame(selector.fit_transform(X_train[label], y_train[label]))
  X_valid_selected[label] = pd.DataFrame(selector.transform(X_valid[label]))
  X_test_selected[label] = pd.DataFrame(selector.transform(X_test[label]))
  # print(X_train_selected)
  # print("=======================================")

X_train_selected['label_1'].shape

"""SVM Model Function"""

def svm_model(L, X_train, X_valid, y_train, y_valid):
  if L == 'label_2':
    svm_regressor = LinearRegression()
    svm_regressor.fit(X_train[L], y_train[L])
    y_pred = svm_regressor.predict(X_valid[L])
    mse = mean_squared_error(y_valid[L], y_pred)
    print(f"MSE for {L}: {mse}")
  else:
    clsf = SVC(kernel='linear')
    clsf.fit(X_train[L], y_train[L])
    y_pred = clsf.predict(X_valid[L])
    print(f"+ Accuracy Score for {L} = ", accuracy_score(y_valid[L], y_pred))

"""Model - Before Feature engineering for all features"""

svm_model('label_1', X_train, X_valid, y_train, y_valid)
svm_model('label_2', X_train, X_valid, y_train, y_valid)
svm_model('label_3', X_train, X_valid, y_train, y_valid)
svm_model('label_4', X_train, X_valid, y_train, y_valid)

X_train['label_1'].shape

y_train['label_1'].shape

X_train_selected['label_1'].shape

"""Model - After Feature engineering"""

svm_model('label_1', X_train_selected, X_valid_selected, y_train, y_valid)
svm_model('label_2', X_train_selected, X_valid_selected, y_train, y_valid)
svm_model('label_3', X_train_selected, X_valid_selected, y_train, y_valid)
svm_model('label_4', X_train_selected, X_valid_selected, y_train, y_valid)

"""Predict Labels"""

def svm_test(L, X_train, X_valid, y_train, y_valid):
  if L == 'label_2':
    svm_regressor = LinearRegression()
    svm_regressor.fit(X_train[L], y_train[L])
    y_pred = svm_regressor.predict(X_valid[L])
  else:
    clsf = SVC(kernel='linear')
    clsf.fit(X_train[L], y_train[L])
    y_pred = clsf.predict(X_valid[L])
  return pd.DataFrame(y_pred)

y_pred_l1 = svm_test('label_1', X_train, X_test, y_train, y_valid)
y_pred_l2 = svm_test('label_2', X_train, X_test, y_train, y_valid)
y_pred_l3 = svm_test('label_3', X_train, X_test, y_train, y_valid)
y_pred_l4 = svm_test('label_4', X_train, X_test, y_train, y_valid)

y_pred_selected_l1 = svm_test('label_1', X_train_selected, X_test_selected, y_train, y_valid)
y_pred_selected_l2 = svm_test('label_2', X_train_selected, X_test_selected, y_train, y_valid)
y_pred_selected_l3 = svm_test('label_3', X_train_selected, X_test_selected, y_train, y_valid)
y_pred_selected_l4 = svm_test('label_4', X_train_selected, X_test_selected, y_train, y_valid)

y_pred_l1

y_pred_selected_l1

"""Create CSV files"""

# Concatenate the DataFrames horizontally

# Convert new_features to a string
new_features_str = str(new_features)

# Create DataFrames for new_features
new_features_df = pd.DataFrame([new_features_str] * len(y_pred_l1))

cn = {}
for i in range(new_features):
  cn[i] = 'new_feature_' + str(i+1)

ncn = [f'new_feature_{i}' for i in range(new_features+1, 257)]
empty_columns = pd.DataFrame(columns=ncn)

labels = ['label_1', 'label_2', 'label_3', 'label_4']
for l in labels:
  X_test_selected[l].rename(columns=cn, inplace=True)
  X_test_selected[l] = pd.concat([X_test_selected[l], empty_columns], axis=1)

result_df = pd.concat([y_pred_l1, y_pred_selected_l1, new_features_df, pd.DataFrame(X_test_selected['label_1'])], axis=1)
result_df.columns = ['Predicted labels before feature engineering', 'Predicted labels after feature engineering', 'No of new features'] + list(pd.DataFrame(X_test_selected['label_1']))
result_df.to_csv("/content/drive/MyDrive/ML/Lab_1/190686N_label_1.csv", index=False)

result_df = pd.concat([y_pred_l2, y_pred_selected_l2, new_features_df, pd.DataFrame(X_test_selected['label_2'])], axis=1)
result_df.columns = ['Predicted labels before feature engineering', 'Predicted labels after feature engineering', 'No of new features'] + list(pd.DataFrame(X_test_selected['label_2']))
result_df.to_csv("/content/drive/MyDrive/ML/Lab_1/190686N_label_2.csv", index=False)

result_df = pd.concat([y_pred_l3, y_pred_selected_l3, new_features_df, pd.DataFrame(X_test_selected['label_3'])], axis=1)
result_df.columns = ['Predicted labels before feature engineering', 'Predicted labels after feature engineering', 'No of new features'] + list(pd.DataFrame(X_test_selected['label_3']))
result_df.to_csv("/content/drive/MyDrive/ML/Lab_1/190686N_label_3.csv", index=False)

result_df = pd.concat([y_pred_l4, y_pred_selected_l4, new_features_df, pd.DataFrame(X_test_selected['label_4'])], axis=1)
result_df.columns = ['Predicted labels before feature engineering', 'Predicted labels after feature engineering', 'No of new features'] + list(pd.DataFrame(X_test_selected['label_4']))
result_df.to_csv("/content/drive/MyDrive/ML/Lab_1/190686N_label_4.csv", index=False)